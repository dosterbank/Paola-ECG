{"cells":[{"cell_type":"markdown","metadata":{"id":"PFGaJHuT5NB5"},"source":["import pandas as pd\n","import torch, time, os, shutil\n","import models, utils\n","import numpy as np\n","import pandas as pd\n","#from tensorboard_logger import Logger\n","from torch import nn, optim\n","from torch.utils.data import DataLoader\n","import tensorflow as tf\n"]},{"cell_type":"markdown","source":["## **Modules**"],"metadata":{"id":"a5Y98FMzlw-1"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"j7nD4-65fRbo"},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import torch, time, os, shutil\n","#import models, utils\n","import numpy as np\n","import pandas as pd\n","#from tensorboard_logger import Logger\n","from torch import nn, optim\n","from torch.utils.data import DataLoader\n","import tensorflow as tf\n"]},{"cell_type":"markdown","source":["# **Cargar la base de datos de una url** "],"metadata":{"id":"YGW787A5iyYI"}},{"cell_type":"code","source":["url = 'https://raw.githubusercontent.com/cs109/2014_data/master/countries.csv'\n","dataset = pd.read_csv(url)\n","\n","dataset = pd.read_csv('Dataset_norm.csv')\n","dataset.rename(columns = {'Label' : 'Condition'}, inplace = True)\n","dataset = dataset.iloc[:,1:]\n","dataset\n","\n"],"metadata":{"id":"ZyqVG9inidxq","colab":{"base_uri":"https://localhost:8080/","height":235},"executionInfo":{"status":"error","timestamp":1656538672212,"user_tz":300,"elapsed":21,"user":{"displayName":"Bryan Juarez","userId":"08478735777142790775"}},"outputId":"b8046cca-c0ec-4a7b-d66a-3196ec2b6e47"},"execution_count":1,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-254506146b31>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0murl\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'https://drive.google.com/file/d/1Uio5khFkRv9s-jeCH0UdchhLEC6j6Ypg/view?usp=sharing'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mdataset\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0murl\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mdataset\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Dataset_norm.csv'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mdataset\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrename\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcolumns\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m'Label'\u001b[0m \u001b[0;34m:\u001b[0m \u001b[0;34m'Condition'\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minplace\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'pd' is not defined"]}]},{"cell_type":"markdown","source":["# **Carga la base de datos desde la misma carpeta del codigo**\n"],"metadata":{"id":"JGcSlFAsi4UO"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"GXWxY-hmimF-"},"outputs":[],"source":["\n","\n","\n","\n","\n","\n","dataset = pd.read_csv('Dataset_norm.csv')\n","dataset.rename(columns = {'Label' : 'Condition'}, inplace = True)\n","dataset = dataset.iloc[:,1:]\n","dataset\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"b2GRIINOJbi1"},"outputs":[],"source":["\n","\n","\n","\n","\n","\n","dataset = pd.read_csv('Dataset_norm.csv')\n","dataset.rename(columns = {'Label' : 'Condition'}, inplace = True)\n","dataset = dataset.iloc[:,1:]\n","dataset\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gE7RiIAMYvlW"},"outputs":[],"source":["x = np.array(dataset.columns)\n","for i in range(len(dataset.columns)):\n","    dataset[x[i]] = dataset[x[i]].fillna(0)"]},{"cell_type":"markdown","metadata":{"id":"fL1sBVbLKRp2"},"source":["# Wesad data (mine)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"v2kA3BNDKUhE"},"outputs":[],"source":["wesad = pd.read_csv('WESAD_data2.csv')\n","wesad = wesad.iloc[:,1:]\n","wesad"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_JTrOXYDKpqc"},"outputs":[],"source":["## All data = wesad+ physionet\n","all_data = dataset.append(wesad, ignore_index=True)\n","all_data"]},{"cell_type":"markdown","metadata":{"id":"5lNfGzCGVqtT"},"source":["# Swell wesad data"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":600,"status":"ok","timestamp":1652968031387,"user":{"displayName":"PAOLA ARACELY VASQUEZ UCHO","userId":"15673971738938414402"},"user_tz":300},"id":"GDSF_MDOtSsN","outputId":"eca180b6-8f6d-403e-afd6-d48f77bf89d6"},"outputs":[{"name":"stdout","output_type":"stream","text":["(113909, 32) (48819, 32)\n"]}],"source":["X = dataset.iloc[:,:-1]\n","Y = dataset.iloc[:,-1]\n","\n","from sklearn.model_selection import train_test_split\n","X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.3)\n","print(X_train.shape, X_test.shape)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9Eh-WumdZcHg"},"outputs":[],"source":["#Standarization\n","from sklearn.preprocessing import StandardScaler\n","scaler = StandardScaler()\n","X_train = scaler.fit_transform(X_train)\n","X_test = scaler.fit_transform(X_test)"]},{"cell_type":"markdown","metadata":{"id":"VbbdAZ8mLGqg"},"source":["# Split data"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":333,"status":"ok","timestamp":1654701177308,"user":{"displayName":"PAOLA ARACELY VASQUEZ UCHO","userId":"15673971738938414402"},"user_tz":300},"id":"AeiyD3gaLJTQ","outputId":"2bd07924-ff74-44d5-f5d1-0fddd39a30e0"},"outputs":[{"name":"stdout","output_type":"stream","text":["(5486, 18) (5486,)\n"]}],"source":["X = all_data.iloc[:,:-1].values\n","Y = all_data.iloc[:,-1].values\n","print(X.shape, Y.shape)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"umyye1yfLYf5"},"outputs":[],"source":["import imblearn\n","from imblearn.over_sampling import SMOTE\n","from collections import Counter\n","from numpy import where\n","from matplotlib import pyplot"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":435,"status":"ok","timestamp":1654701185413,"user":{"displayName":"PAOLA ARACELY VASQUEZ UCHO","userId":"15673971738938414402"},"user_tz":300},"id":"I8U51xcOLayh","outputId":"0701faf3-f711-4632-94c5-4fe4f1441f3e"},"outputs":[{"name":"stdout","output_type":"stream","text":["Counter({0: 3146, 1: 2340})\n"]}],"source":["counter = Counter(Y)\n","print(counter)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":391,"status":"ok","timestamp":1654701197026,"user":{"displayName":"PAOLA ARACELY VASQUEZ UCHO","userId":"15673971738938414402"},"user_tz":300},"id":"5NMsRs17LiLK","outputId":"3a6758b3-aec0-49a3-c8d8-02c652ca12a8"},"outputs":[{"name":"stdout","output_type":"stream","text":["(4388, 18) (1098, 18)\n"]}],"source":["from sklearn.model_selection import train_test_split\n","X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2)\n","print(X_train.shape, X_test.shape)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":344,"status":"ok","timestamp":1654701213076,"user":{"displayName":"PAOLA ARACELY VASQUEZ UCHO","userId":"15673971738938414402"},"user_tz":300},"id":"4u-jxcwp4LEP","outputId":"50ccdd02-beb4-4f3e-b981-4acba655200b"},"outputs":[{"name":"stdout","output_type":"stream","text":["(5028, 18) (1098, 18)\n"]}],"source":["oversample = SMOTE(k_neighbors=2)\n","X_train, Y_train = oversample.fit_resample(X_train, Y_train)\n","print(X_train.shape, X_test.shape)"]},{"cell_type":"markdown","metadata":{"id":"Gqwghb741Kbk"},"source":["# Deep ECGNet"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"JOj91s7zE_3P"},"outputs":[],"source":["import tensorflow as tf\n","from keras.models import Sequential\n","from tensorflow import keras\n","from keras.layers import Dense, Conv1D, MaxPooling1D, Dropout, BatchNormalization, SimpleRNN, Flatten, LSTM"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":407},"executionInfo":{"elapsed":880,"status":"error","timestamp":1651000632796,"user":{"displayName":"PAOLA ARACELY VASQUEZ UCHO","userId":"15673971738938414402"},"user_tz":300},"id":"rwuXD9-h1Nyt","outputId":"80453577-482c-4044-d2f8-7224b255a743"},"outputs":[{"ename":"ValueError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-17-20c8546fd2c5>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;31m# print(a.shape)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mConv1D\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m16\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mactivation\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'relu'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput_shape\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minput_shape\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m#one filter with shape of 3, kernel_size = shape of filter\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mMaxPooling1D\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpool_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstrides\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpadding\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'valid'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     11\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mDropout\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m.2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m model.add(BatchNormalization(axis=-1,momentum=0.99, epsilon=0.001, center=True,\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/training/tracking/base.py\u001b[0m in \u001b[0;36m_method_wrapper\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    627\u001b[0m     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_self_setattr_tracking\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m  \u001b[0;31m# pylint: disable=protected-access\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    628\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 629\u001b[0;31m       \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    630\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    631\u001b[0m       \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_self_setattr_tracking\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mprevious_value\u001b[0m  \u001b[0;31m# pylint: disable=protected-access\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     65\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint: disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 67\u001b[0;31m       \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiltered_tb\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     68\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m       \u001b[0;32mdel\u001b[0m \u001b[0mfiltered_tb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/engine/input_spec.py\u001b[0m in \u001b[0;36massert_input_compatibility\u001b[0;34m(input_spec, inputs, layer_name)\u001b[0m\n\u001b[1;32m    212\u001b[0m       \u001b[0mndim\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mshape\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrank\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    213\u001b[0m       \u001b[0;32mif\u001b[0m \u001b[0mndim\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mspec\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 214\u001b[0;31m         raise ValueError(f'Input {input_index} of layer \"{layer_name}\" '\n\u001b[0m\u001b[1;32m    215\u001b[0m                          \u001b[0;34m'is incompatible with the layer: '\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    216\u001b[0m                          \u001b[0;34mf'expected ndim={spec.ndim}, found ndim={ndim}. '\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Input 0 of layer \"max_pooling1d\" is incompatible with the layer: expected ndim=3, found ndim=4. Full shape received: (None, 4, 8, 16)"]}],"source":["model = Sequential()\n","input_shape = (4,10,2495)\n","x = tf.random.normal(input_shape)\n","# input_shape=input_shape[1:])(x)\n","# y = Conv1D(16, 3, activation='relu', input_shape=input_shape)\n","# print(y.shape)\n","# a = Conv1D(16, 3, activation='relu', input_shape=input_shape[1:])(x)\n","# print(a.shape)\n","model.add(Conv1D(16, 3, activation='relu', input_shape=input_shape)) #one filter with shape of 3, kernel_size = shape of filter\n","model.add(MaxPooling1D(pool_size=2, strides=1, padding='valid'))\n","model.add(Dropout(.2))\n","model.add(BatchNormalization(axis=-1,momentum=0.99, epsilon=0.001, center=True,\n","    scale=True, beta_initializer=\"zeros\", gamma_initializer=\"ones\",\n","    moving_mean_initializer=\"zeros\", moving_variance_initializer=\"ones\"))\n","lstm = LSTM(4)\n","inputs = tf.random.normal([32, 10, 8])\n","# aux = LSTM(inputs)\n","print(type(lstm))\n","model.add(lstm)\n","# model.add(BatchNormalization(axis=-1,momentum=0.99, epsilon=0.001, center=True,\n","#     scale=True, beta_initializer=\"zeros\", gamma_initializer=\"ones\",\n","#     moving_mean_initializer=\"zeros\", moving_variance_initializer=\"ones\"))\n","# model.add(LSTM(3))\n","print(model.summary())"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"q8AzioUdEEie"},"outputs":[],"source":["#defining the model evaluation for backpropogation\n","model.compile(optimizer='sgd', loss='mean_squared_error')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1CcRo4faDQoU"},"outputs":[],"source":["X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.3)\n","print(X_train.shape, X_test.shape)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"2NnAdufuENLt"},"outputs":[],"source":["model.fit(X_train, Y_train, epochs=900)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yNOXHs2ZDvDC"},"outputs":[],"source":["model.fit(X_train, Y_train)\n","\n","Y_pred_nn = model.predict(X_test)\n","\n","from sklearn.metrics import  confusion_matrix, accuracy_score, precision_score, recall_score, f1_score\n","# print(\"Confusion Matrix:\\n\", confusion_matrix(Y_test, Y_pred_rfc))\n","print(\"Accuracy:\\n\", accuracy_score(Y_test, Y_pred_nn))\n","print(\"Precision:\\n\", precision_score(Y_test, Y_pred_nn, average=None))\n","print(\"Recall:\\n\", recall_score(Y_test, Y_pred_nn, average = None))\n","print(\"F1:\\n\", f1_score(Y_test, Y_pred_nn, average = None))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":10347,"status":"ok","timestamp":1651000791620,"user":{"displayName":"PAOLA ARACELY VASQUEZ UCHO","userId":"15673971738938414402"},"user_tz":300},"id":"0pIW9QxWphQC","outputId":"7cf7ffb3-d752-4bc5-a06a-8c3c8c27a18e"},"outputs":[{"name":"stdout","output_type":"stream","text":["Model: \"sequential_2\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," conv1d_2 (Conv1D)           (None, 2493, 32)          1568      \n","                                                                 \n"," max_pooling1d_2 (MaxPooling  (None, 2492, 32)         0         \n"," 1D)                                                             \n","                                                                 \n"," dropout_1 (Dropout)         (None, 2492, 32)          0         \n","                                                                 \n"," batch_normalization_1 (Batc  (None, 2492, 32)         128       \n"," hNormalization)                                                 \n","                                                                 \n","=================================================================\n","Total params: 1,696\n","Trainable params: 1,632\n","Non-trainable params: 64\n","_________________________________________________________________\n","None\n"]}],"source":["from keras.backend import flatten\n","model = Sequential()\n","conv = Conv1D(filters = 32, kernel_size = 3, activation='relu', input_shape=(2495,16)) #one filter with shape of 3, kernel_size = shape of filter\n","m_pool = MaxPooling1D(pool_size=2, strides=1, padding='valid')\n","model.add(conv)\n","model.add(m_pool)\n","model.add(Dropout(.2))\n","# model.add(Flatten())\n","model.add(BatchNormalization(axis=-1,momentum=0.99, epsilon=0.001, center=True,\n","    scale=True, beta_initializer=\"zeros\", gamma_initializer=\"ones\",\n","    moving_mean_initializer=\"zeros\", moving_variance_initializer=\"ones\"))\n","\n","inputs = np.random.random([2492, 2492, 22]).astype(np.float32)\n","rnn1 = SimpleRNN(units= 12)\n","output = rnn1(inputs)  \n","# model.add(rnn1)\n","\n","# model.add(BatchNormalization(axis=-1,momentum=0.99, epsilon=0.001, center=True,\n","#     scale=True, beta_initializer=\"zeros\", gamma_initializer=\"ones\",\n","#     moving_mean_initializer=\"zeros\", moving_variance_initializer=\"ones\"))\n","# rnn = SimpleRNN(units = 8, input_dim = 12)\n","# model.add(rnn)\n","# rnn.input_shape\n","print(model.summary())"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ldD3S_fBw2aZ"},"outputs":[],"source":["tf.keras.utils.plot_model(\n","    model,\n","    to_file=\"model.png\",\n","    show_shapes=True,\n","    show_dtype=False,\n","    show_layer_names=True,\n","    rankdir=\"TB\",\n","    expand_nested=False,\n","    dpi=96,\n",")"]}],"metadata":{"colab":{"collapsed_sections":["PFGaJHuT5NB5","KMAEqaiQVlki","5lNfGzCGVqtT"],"name":"Paola tesis","provenance":[{"file_id":"1WdMioozEJW_CMVQABABb5GnRDYbQ6MOc","timestamp":1656373819980}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}